const express = require('express');
const router = express.Router();
const bcrypt = require('bcrypt');          // Подключаем bcrypt для шифрования паролей
const jwt = require('jsonwebtoken');         // Подключаем jsonwebtoken для создания токенов

// Секрет для подписи JWT (в реальном проекте храните его в переменных окружения)
const JWT_SECRET = 'your_super_secret_key';

// Временное хранилище пользователей (в будущем заменим на базу данных)
let users = [];

// Маршрут регистрации пользователя
router.post('/register', async (req, res) => {
  try {
    const { username, email, phone, country, platform, gamertag, password } = req.body;

    // Проверка обязательных полей
    if (!username || !email || !phone || !country || !platform || !gamertag || !password) {
      return res.status(400).json({ error: 'Заполните все обязательные поля' });
    }

    // Проверка наличия пользователя с таким email
    const existingUser = users.find(user => user.email === email);
    if (existingUser) {
      return res.status(409).json({ error: 'Пользователь с таким email уже зарегистрирован' });
    }

    // Хэширование пароля
    const saltRounds = 10;
    const hashedPassword = await bcrypt.hash(password, saltRounds);

    // Создаем нового пользователя, сохраняем хэш вместо исходного пароля
    const newUser = {
      id: users.length + 1,
      username,
      email,
      phone,
      country,
      platform,
      gamertag,
      password: hashedPassword  // Сохраняем хэш пароля
    };

    users.push(newUser);
    return res.status(201).json({ message: 'Пользователь успешно зарегистрирован', user: newUser });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Внутренняя ошибка сервера' });
  }
});

// Маршрут для авторизации (логина)
router.post('/login', async (req, res) => {
  try {
    const { email, password } = req.body;

    // Проверка наличия обязательных полей
    if (!email || !password) {
      return res.status(400).json({ error: 'Введите email и пароль' });
    }

    // Поиск пользователя по email
    const user = users.find(user => user.email === email);
    if (!user) {
      return res.status(401).json({ error: 'Неверный email или пароль' });
    }

    // Сравнение введенного пароля с хэшированным
    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
      return res.status(401).json({ error: 'Неверный email или пароль' });
    }

    // Генерация JWT (например, токен действителен 1 час)
    const token = jwt.sign({ id: user.id, email: user.email }, JWT_SECRET, { expiresIn: '1h' });

    return res.status(200).json({ message: 'Вход выполнен успешно', token });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Внутренняя ошибка сервера' });
  }
});

module.exports = router;
